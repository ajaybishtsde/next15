// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                     String          @id @default(auto()) @map("_id") @db.ObjectId
  clerkId                String?
  username               String          @unique
  avatar                 String?
  cover                  String?
  name                   String?
  lastname               String?
  description            String?
  city                   String?
  school                 String?
  work                   String?
  website                String?
  createdAt              DateTime        @default(now())
  posts                  Post[]
  likes                  Like[]
  comments               Comment[]
  followers              Follower[]      @relation("userFollowers")
  followings             Follower[]      @relation("userFollowings")
  followRequestsSent     FollowRequest[] @relation("followRequestsSent")
  followRequestsReceived FollowRequest[] @relation("followRequestsReceived")
  blocks                 Block[]         @relation("blocksSent")
  blockedBy              Block[]         @relation("blocksReceived")
  stories                Story[]
}

model Post {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  desc      String
  img       String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String    @db.ObjectId
  likes     Like[]
  comments  Comment[]
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  desc      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?  @db.ObjectId
  Post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String?  @db.ObjectId
  likes     Like[]
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  Post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String?  @db.ObjectId
  Comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String?  @db.ObjectId
}

model Follower {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  follower      User     @relation("userFollowers", fields: [userFollower], references: [id])
  userFollower  String   @db.ObjectId
  following     User     @relation("userFollowings", fields: [userFollowing], references: [id])
  userFollowing String   @db.ObjectId
}

model FollowRequest {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now())
  sender     User     @relation("followRequestsSent", fields: [senderId], references: [id])
  senderId   String   @db.ObjectId
  receiver   User     @relation("followRequestsReceived", fields: [receiverId], references: [id])
  receiverId String   @db.ObjectId

  @@unique([senderId, receiverId])
}

model Block {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  blocker   User     @relation("blocksSent", fields: [blockerId], references: [id])
  blockerId String   @db.ObjectId
  blocked   User     @relation("blocksReceived", fields: [blockedId], references: [id])
  blockedId String   @db.ObjectId

  @@unique([blockerId, blockedId])
}

model Story {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  expiresAt DateTime
  img       String
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique @db.ObjectId
}
